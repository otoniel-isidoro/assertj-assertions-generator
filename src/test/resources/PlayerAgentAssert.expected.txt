package org.assertj.assertions.generator.data.nba;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link PlayerAgent} specific assertions - Generated by CustomAssertionGenerator.
 */
public class PlayerAgentAssert extends AbstractAssert<PlayerAgentAssert, PlayerAgent> {

  /**
   * Creates a new <code>{@link PlayerAgentAssert}</code> to make assertions on actual PlayerAgent.
   * @param actual the PlayerAgent we want to make assertions on.
   */
  public PlayerAgentAssert(PlayerAgent actual) {
    super(actual, PlayerAgentAssert.class);
  }

  /**
   * An entry point for PlayerAgentAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myPlayerAgent)</code> and get specific assertion with code completion.
   * @param actual the PlayerAgent we want to make assertions on.
   * @return a new <code>{@link PlayerAgentAssert}</code>
   */
  public static PlayerAgentAssert assertThat(PlayerAgent actual) {
    return new PlayerAgentAssert(actual);
  }

  /**
   * Verifies that the actual PlayerAgent's managedPlayer is equal to the given one.
   * @param managedPlayer the given managedPlayer to compare the actual PlayerAgent's managedPlayer to.
   * @return this assertion object.
   * @throws AssertionError - if the actual PlayerAgent's managedPlayer is not equal to the given one.
   */
  public PlayerAgentAssert hasManagedPlayer(Player managedPlayer) {
    // check that actual PlayerAgent we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected managedPlayer of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Player actualManagedPlayer = actual.getManagedPlayer();
    if (!Objects.areEqual(actualManagedPlayer, managedPlayer)) {
      failWithMessage(assertjErrorMessage, actual, managedPlayer, actualManagedPlayer);
    }

    // return the current assertion for method chaining
    return this;
  }

}
