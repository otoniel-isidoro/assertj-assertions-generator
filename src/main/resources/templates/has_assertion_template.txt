
  /**
   * Verifies that the actual ${class_to_assert}'s ${property} is equal to the given one.
   * @param ${property} the given ${property} to compare the actual ${class_to_assert}'s ${property} to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ${class_to_assert}'s ${property} is not equal to the given one.${throws_javadoc}
   */
  public ${self_type} has${Property}(${propertyType} ${property}) ${throws}{
    // check that actual ${class_to_assert} we want to make assertions on is not null.
    overridingErrorMessage("Expected ${class_to_assert} not to be null").isNotNull();

    if(actual!=null){
        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpected ${property} of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        ${propertyType} actual${Property} = actual.get${Property}();
        if (!org.assertj.core.util.Objects.areEqual(actual${Property}, ${property})) {
          failWithMessage(assertjErrorMessage, actual, ${property}, actual${Property});
        }
    }

    // return the current assertion for method chaining
    return ${myself};
  }